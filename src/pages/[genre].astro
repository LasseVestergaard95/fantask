---
import ProductGrid from "../components/ProductGrid.astro";
import Indhold from "../layouts/Indhold.astro";
import MainLayout from "../layouts/MainLayout.astro";

export async function getStaticPaths() {
    const url = "https://awccwteuyfoulnztrlsc.supabase.co/rest/v1/produkter?select=genre,type";
    const apikey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF3Y2N3dGV1eWZvdWxuenRybHNjIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODQyMzUzNzAsImV4cCI6MTk5OTgxMTM3MH0.j55yJxX0YRq2JVBAyJGzGEdMi5qoOAeM0vZNgy-y7nE"

    const options = {
        headers: {
            apikey: apikey
        }
    }

    const response = await fetch(url, options);
    const data = await response.json();

    console.log(data);

    const unikkeGenre = data
        // Map over the 'data' array, returning an object with 'genre' and 'type' for each item.
        .map(item => ({ genre: item.genre, type: item.type }))
        // Filter out any items where 'genre' or 'type' is null or falsy.
        .filter(item => item.genre && item.type)
        // Use the reduce function to eliminate duplicates.
        .reduce((unique, item) => 
            // If the current item (genre and type) already exists in the unique array, return the current unique array...
            unique.some(obj => obj.genre === item.genre && obj.type === item.type) 
            ? unique 
            // ...otherwise, append the new item (genre and type) to the unique array.
            : [...unique, item],
            []
        );

    // Log the result (the array of unique genre-type objects without null values) to the console.
    console.log(unikkeGenre);

    const paths = unikkeGenre.map((genre) => ({
        params: { genre: genre.genre },
        props: { genre },
        }));

    return paths;
}

const url = "https://awccwteuyfoulnztrlsc.supabase.co/rest/v1/produkter?select=genre,type";
const apikey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF3Y2N3dGV1eWZvdWxuenRybHNjIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODQyMzUzNzAsImV4cCI6MTk5OTgxMTM3MH0.j55yJxX0YRq2JVBAyJGzGEdMi5qoOAeM0vZNgy-y7nE"

const options = {
    headers: {
        apikey: apikey
    }
}

const response = await fetch(url, options);
const data = await response.json();

const unikkeGenre = data
    // Map over the 'data' array, returning an object with 'genre' and 'type' for each item.
    .map(item => ({ genre: item.genre, type: item.type }))
    // Filter out any items where 'genre' or 'type' is null or falsy.
    .filter(item => item.genre && item.type)
    // Use the reduce function to eliminate duplicates.
    .reduce((unique, item) => 
        // If the current item (genre and type) already exists in the unique array, return the current unique array...
        unique.some(obj => obj.genre === item.genre && obj.type === item.type) 
        ? unique 
        // ...otherwise, append the new item (genre and type) to the unique array.
        : [...unique, item],
        []
    );

// // Log the result (the array of unique genre-type objects without null values) to the console.
// console.log(unikkeGenre);

const { genre } = Astro.props;

---

<MainLayout>
    <Indhold>
        <div class="head">
            <h2>
                {
                    genre.type == "Bog" ? "Bøger" : "Tegneserier"
                }
            </h2>
            <h1>{genre.genre}</h1>
            <div class="filtrer">
                <form>
                    <select name="sorter" id="sorter" class="sorter_knap">
                        <option value="populaer">Mest Populære</option>
                        <option value="nyeste">Nyeste</option>
                        <option value="alfabetisk">Alfabetisk</option>
                        <option value="pris">Pris</option>
                    </select>
                </form>
                <div class="filter_knap">Filtrér
                        <div class="submenu">
                            <div class="bubble">
                                <ul>Format
                                    <li>
                                        <input type="checkbox" id="Hardcover"></input>
                                        <label for="Hardcover">Hardcover</label>
                                    </li>
                                    <li>
                                        <input type="checkbox" id="Paperback"></input>
                                        <label for="Paperback">Paperback</label>
                                    </li>
                                </ul>
                                <ul>Sprog
                                    <li>
                                        <input type="checkbox" id="Engelsk"></input>
                                        <label for="Engelsk">Engelsk</label>
                                    </li>
                                    <li>
                                        <input type="checkbox" id="Dansk"></input>
                                        <label for="Dansk">Dansk</label>
                                    </li>
                                </ul>
                            </div>
                        </div>
                </div>
            </div>
        </div>

        <ProductGrid genre={genre.genre} type={genre.type} />

    </Indhold>
</MainLayout>

<style>

    li {
        list-style: none;
    }

    input {
        cursor: pointer;
    }

    input[type="checkbox"] {
        margin-right: 0.2rem;
        font-weight: 300;
    }

    label {
        font-weight: 400;
    }
    .head {
        padding-inline: 2rem;
        margin: 0 auto;
        max-width: 1100px;
        margin-top: 3rem;
    }
    
    .head h1 {
        margin-bottom: 1rem;
    }

    .filtrer {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: 1rem;

    }

    .filter_knap {
        cursor: pointer;
        color: var(--white);
        background-color: var(--dark-blue);
        border-radius: 5px;
        padding: 0.25rem 0.75rem;
    }

    .filter_knap * {
        color: var(--black);
    }
    .filter_knap:hover .submenu {
            opacity: 1;
            pointer-events: all;
    }
    
    .sorter_knap {
        color: var(--white);
        background-color: var(--dark-blue);
        border-radius: 5px;
        padding: 0.4rem 0.8rem;
        font-size: 16px;
        font-weight: 400;
        border: none;
    }

    .submenu {
        position: absolute;
        width: fit-content;
        opacity: 0;
        border-radius: 15px;
        background-color: var(--white);
        padding: 2rem;
        z-index: 1;
        border: 1px solid var(--black);
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.2);
        pointer-events: none;
        transition: opacity 0.2s ease-in-out;
        transform: translateX(-37%) translateY(0%);
    }

    .submenu:hover {
        display: block;
    }

    .submenu ul {
        font-weight: 600;
        font-size: 20px;
    }

    .submenu ul a {
        font-weight: 400;
        color: var(--black);
    }

    .submenu li {
        font-size: 16px;
        margin-top: 0.1rem;
        opacity: 1;
    }

    .submenu li:first-of-type {
        margin-top: 0.2rem;
    }

    .bubble {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
</style>